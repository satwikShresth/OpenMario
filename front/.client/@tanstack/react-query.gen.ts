// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { GetAutocompleteCompanyData, GetAutocompletePositionData, GetAutocompleteLocationData, GetSubmissionsData, PostSubmissionsData, PostSubmissionsError, PostSubmissionsResponse } from '../types.gen';
import { SearchService, SubmissionsService, client } from '../sdk.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const getAutocompleteCompanyQueryKey = (options: Options<GetAutocompleteCompanyData>) => [
    createQueryKey('getAutocompleteCompany', options)
];

export const getAutocompleteCompanyOptions = (options: Options<GetAutocompleteCompanyData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SearchService.getAutocompleteCompany({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAutocompleteCompanyQueryKey(options)
    });
};

export const getAutocompletePositionQueryKey = (options: Options<GetAutocompletePositionData>) => [
    createQueryKey('getAutocompletePosition', options)
];

export const getAutocompletePositionOptions = (options: Options<GetAutocompletePositionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SearchService.getAutocompletePosition({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAutocompletePositionQueryKey(options)
    });
};

export const getAutocompleteLocationQueryKey = (options: Options<GetAutocompleteLocationData>) => [
    createQueryKey('getAutocompleteLocation', options)
];

export const getAutocompleteLocationOptions = (options: Options<GetAutocompleteLocationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SearchService.getAutocompleteLocation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAutocompleteLocationQueryKey(options)
    });
};

export const getSubmissionsQueryKey = (options?: Options<GetSubmissionsData>) => [
    createQueryKey('getSubmissions', options)
];

export const getSubmissionsOptions = (options?: Options<GetSubmissionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SubmissionsService.getSubmissions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSubmissionsQueryKey(options)
    });
};

export const postSubmissionsQueryKey = (options: Options<PostSubmissionsData>) => [
    createQueryKey('postSubmissions', options)
];

export const postSubmissionsOptions = (options: Options<PostSubmissionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SubmissionsService.postSubmissions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postSubmissionsQueryKey(options)
    });
};

export const postSubmissionsMutation = (options?: Partial<Options<PostSubmissionsData>>) => {
    const mutationOptions: UseMutationOptions<PostSubmissionsResponse, AxiosError<PostSubmissionsError>, Options<PostSubmissionsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SubmissionsService.postSubmissions({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};