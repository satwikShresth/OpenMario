// This file is auto-generated by @hey-api/openapi-ts

export const JwtPayloadSchema = {
  type: "object",
  properties: {
    user_id: {
      type: "string",
      format: "uuid",
      example: "123e4567-e89b-12d3-a456-426614174000",
    },
    username: {
      type: "string",
      minLength: 3,
      maxLength: 50,
      example: "john_doe",
    },
    email: {
      type: "string",
      minLength: 3,
      maxLength: 50,
      format: "email",
      example: "john_doe",
    },
    exp: {
      type: "integer",
      minimum: 0,
      example: 1620000000,
    },
  },
  required: ["user_id", "username", "email", "exp"],
  example: {
    user_id: "123e4567-e89b-12d3-a456-426614174000",
    username: "john_doe",
    iat: 1620000000,
  },
} as const;

export const LoginSchema = {
  type: "object",
  properties: {
    email: {
      type: "string",
      format: "email",
    },
  },
  required: ["email"],
} as const;

export const MajorSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      format: "uuid",
    },
    program_level: {
      type: "string",
      enum: ["Undergraduate", "Graduate"],
    },
    name: {
      type: "string",
      maxLength: 255,
    },
  },
  required: ["id", "program_level", "name"],
} as const;

export const MinorSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      format: "uuid",
    },
    program_level: {
      type: "string",
      enum: ["Undergraduate", "Graduate"],
    },
    name: {
      type: "string",
      maxLength: 255,
    },
  },
  required: ["id", "program_level", "name"],
} as const;

export const LocationSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      format: "uuid",
    },
    state_code: {
      type: "string",
      maxLength: 3,
    },
    state: {
      type: "string",
      maxLength: 100,
    },
    city: {
      type: "string",
      maxLength: 100,
    },
  },
  required: ["id", "state_code", "state", "city"],
} as const;

export const CoopYearSchema = {
  type: "string",
  enum: ["1st", "2nd", "3rd"],
} as const;

export const CoopCycleSchema = {
  type: "string",
  enum: ["Fall/Winter", "Winter/Spring", "Spring/Summer", "Summer/Fall"],
} as const;

export const ProgramLevelSchema = {
  type: "string",
  enum: ["Undergraduate", "Graduate"],
} as const;

export const CompanySchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      format: "uuid",
    },
    name: {
      type: "string",
      maxLength: 255,
    },
    owner_id: {
      type: "string",
      nullable: true,
      format: "uuid",
    },
  },
  required: ["id", "name", "owner_id"],
} as const;

export const CompanyInsertSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      format: "uuid",
    },
    name: {
      type: "string",
      minLength: 3,
      maxLength: 100,
    },
    owner_id: {
      type: "string",
      nullable: true,
      format: "uuid",
    },
  },
  required: ["name"],
} as const;

export const PositionSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      format: "uuid",
    },
    company_id: {
      type: "string",
      format: "uuid",
    },
    name: {
      type: "string",
      maxLength: 255,
    },
    owner_id: {
      type: "string",
      nullable: true,
      format: "uuid",
    },
  },
  required: ["id", "company_id", "name", "owner_id"],
} as const;

export const PositionInsertSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      format: "uuid",
    },
    company_id: {
      type: "string",
      format: "uuid",
    },
    name: {
      type: "string",
      minLength: 3,
      maxLength: 100,
    },
    owner_id: {
      type: "string",
      nullable: true,
      format: "uuid",
    },
  },
  required: ["company_id", "name"],
} as const;

export const CompanyPositionInsertSchema = {
  type: "object",
  properties: {
    company: {
      type: "string",
      minLength: 3,
      maxLength: 100,
    },
    position: {
      type: "string",
      minLength: 3,
      maxLength: 100,
    },
  },
  required: ["company", "position"],
} as const;

export const SubmissionSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      format: "uuid",
    },
    position_id: {
      type: "string",
      format: "uuid",
    },
    location_id: {
      type: "string",
      format: "uuid",
    },
    program_level: {
      type: "string",
      enum: ["Undergraduate", "Graduate"],
    },
    work_hours: {
      type: "integer",
      minimum: -2147483648,
      maximum: 2147483647,
    },
    coop_cycle: {
      type: "string",
      enum: ["Fall/Winter", "Winter/Spring", "Spring/Summer", "Summer/Fall"],
    },
    coop_year: {
      type: "string",
      enum: ["1st", "2nd", "3rd"],
    },
    year: {
      type: "integer",
      minimum: -2147483648,
      maximum: 2147483647,
    },
    compensation: {
      type: "number",
      nullable: true,
      minimum: -140737488355328,
      maximum: 140737488355327,
    },
    other_compensation: {
      type: "string",
      nullable: true,
      maxLength: 255,
    },
    details: {
      type: "string",
      nullable: true,
      maxLength: 255,
    },
    owner_id: {
      type: "string",
      nullable: true,
      format: "uuid",
    },
    created_at: {
      type: "string",
    },
  },
  required: [
    "id",
    "position_id",
    "location_id",
    "program_level",
    "work_hours",
    "coop_cycle",
    "coop_year",
    "year",
    "compensation",
    "other_compensation",
    "details",
    "owner_id",
    "created_at",
  ],
} as const;

export const SubmissionAggregateSchema = {
  type: "object",
  properties: {
    company: {
      type: "string",
      minLength: 3,
      maxLength: 100,
    },
    position: {
      type: "string",
      minLength: 3,
      maxLength: 100,
    },
    location: {
      type: "string",
    },
    work_hours: {
      type: "integer",
      minimum: 5,
      maximum: 60,
      example: 40,
    },
    compensation: {
      type: "number",
      minimum: 0,
      example: 100,
    },
    other_compensation: {
      type: "string",
      maxLength: 255,
    },
    details: {
      type: "string",
      maxLength: 255,
    },
    year: {
      type: "integer",
      minimum: 2005,
    },
    coop_year: {
      type: "string",
      enum: ["1st", "2nd", "3rd"],
    },
    coop_cycle: {
      type: "string",
      enum: ["Fall/Winter", "Winter/Spring", "Spring/Summer", "Summer/Fall"],
    },
    program_level: {
      type: "string",
      enum: ["Undergraduate", "Graduate"],
    },
  },
  required: [
    "company",
    "position",
    "location",
    "work_hours",
    "compensation",
    "other_compensation",
    "details",
    "year",
    "coop_year",
    "coop_cycle",
    "program_level",
  ],
} as const;

export const SubmissionAggregateUpdateSchema = {
  type: "object",
  properties: {
    company: {
      type: "string",
      minLength: 3,
      maxLength: 100,
    },
    position: {
      type: "string",
      minLength: 3,
      maxLength: 100,
    },
    location: {
      type: "string",
    },
    work_hours: {
      type: "integer",
      minimum: 5,
      maximum: 60,
      example: 40,
    },
    compensation: {
      type: "number",
      minimum: 0,
      example: 100,
    },
    other_compensation: {
      type: "string",
      maxLength: 255,
    },
    details: {
      type: "string",
      maxLength: 255,
    },
    year: {
      type: "integer",
      minimum: 2005,
    },
    coop_year: {
      type: "string",
      enum: ["1st", "2nd", "3rd"],
    },
    coop_cycle: {
      type: "string",
      enum: ["Fall/Winter", "Winter/Spring", "Spring/Summer", "Summer/Fall"],
    },
    program_level: {
      type: "string",
      enum: ["Undergraduate", "Graduate"],
    },
    id: {
      type: "string",
      format: "uuid",
    },
  },
  required: [
    "company",
    "position",
    "location",
    "work_hours",
    "compensation",
    "other_compensation",
    "details",
    "year",
    "coop_year",
    "coop_cycle",
    "program_level",
    "id",
  ],
} as const;

export const SubmissionInsertSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      format: "uuid",
    },
    position_id: {
      type: "string",
      format: "uuid",
    },
    location_id: {
      type: "string",
      format: "uuid",
    },
    program_level: {
      type: "string",
      enum: ["Undergraduate", "Graduate"],
    },
    work_hours: {
      type: "integer",
      minimum: 5,
      maximum: 60,
      example: 40,
    },
    coop_cycle: {
      type: "string",
      enum: ["Fall/Winter", "Winter/Spring", "Spring/Summer", "Summer/Fall"],
    },
    coop_year: {
      type: "string",
      enum: ["1st", "2nd", "3rd"],
    },
    year: {
      type: "integer",
      minimum: 2005,
      maximum: 2147483647,
      example: 2025,
    },
    compensation: {
      type: "number",
      nullable: true,
      minimum: 0,
      maximum: 140737488355327,
      example: 100,
    },
    other_compensation: {
      type: "string",
      nullable: true,
      maxLength: 255,
    },
    details: {
      type: "string",
      nullable: true,
      maxLength: 255,
    },
    owner_id: {
      type: "string",
      nullable: true,
      format: "uuid",
    },
    created_at: {
      type: "string",
    },
  },
  required: [
    "position_id",
    "location_id",
    "program_level",
    "coop_cycle",
    "coop_year",
    "year",
  ],
} as const;

export const SubmissionMeIdsSchema = {
  type: "object",
  properties: {
    ids: {
      type: "array",
      items: {
        type: "string",
        format: "uuid",
      },
    },
  },
} as const;

export const SubmissionUpdateSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      format: "uuid",
    },
    position_id: {
      type: "string",
      format: "uuid",
    },
    location_id: {
      type: "string",
      format: "uuid",
    },
    program_level: {
      type: "string",
      enum: ["Undergraduate", "Graduate"],
    },
    work_hours: {
      type: "integer",
      minimum: 5,
      maximum: 60,
      example: 40,
    },
    coop_cycle: {
      type: "string",
      enum: ["Fall/Winter", "Winter/Spring", "Spring/Summer", "Summer/Fall"],
    },
    coop_year: {
      type: "string",
      enum: ["1st", "2nd", "3rd"],
    },
    year: {
      type: "integer",
      minimum: 2005,
      maximum: 2147483647,
      example: 2025,
    },
    compensation: {
      type: "number",
      nullable: true,
      minimum: 0,
      maximum: 140737488355327,
      example: 100,
    },
    other_compensation: {
      type: "string",
      nullable: true,
      maxLength: 255,
    },
    details: {
      type: "string",
      nullable: true,
      maxLength: 255,
    },
    owner_id: {
      type: "string",
      nullable: true,
      format: "uuid",
    },
    created_at: {
      type: "string",
    },
  },
} as const;

export const SubmissionQuerySchema = {
  type: "object",
  properties: {
    company: {
      type: "array",
      items: {
        type: "string",
        minLength: 3,
        maxLength: 100,
      },
    },
    position: {
      type: "array",
      items: {
        type: "string",
        minLength: 3,
        maxLength: 100,
      },
    },
    location: {
      type: "array",
      items: {
        type: "string",
        pattern: "^[A-Za-z\\s.-]+,\\s*[A-Z]{2}$",
      },
    },
    year: {
      type: "array",
      nullable: true,
      items: {
        type: "number",
        nullable: true,
      },
    },
    coop_year: {
      type: "array",
      items: {
        type: "string",
        enum: ["1st", "2nd", "3rd"],
      },
    },
    coop_cycle: {
      type: "array",
      items: {
        type: "string",
        enum: ["Fall/Winter", "Winter/Spring", "Spring/Summer", "Summer/Fall"],
      },
    },
    program_level: {
      type: "string",
      enum: ["Undergraduate", "Graduate"],
    },
    pageIndex: {
      type: "integer",
      nullable: true,
      minimum: 0,
      maximum: null,
    },
    pageSize: {
      type: "integer",
      minimum: 1,
      maximum: 100,
    },
    distinct: {
      type: "boolean",
      nullable: true,
      default: true,
    },
  },
} as const;

export const SubmissionResponseSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    year: {
      type: "number",
    },
    coop_year: {
      type: "number",
    },
    coop_cycle: {
      type: "string",
    },
    program_level: {
      type: "string",
    },
    work_hours: {
      type: "number",
    },
    compensation: {
      type: "number",
    },
    other_compensation: {
      type: "string",
    },
    details: {
      type: "string",
    },
    position: {
      type: "string",
    },
    company: {
      type: "string",
    },
    location_city: {
      type: "string",
    },
    location_state: {
      type: "string",
    },
    location_state_code: {
      type: "string",
    },
  },
  required: [
    "id",
    "year",
    "coop_year",
    "coop_cycle",
    "program_level",
    "work_hours",
    "compensation",
    "other_compensation",
    "details",
    "position",
    "company",
    "location_city",
    "location_state",
    "location_state_code",
  ],
} as const;
