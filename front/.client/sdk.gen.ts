// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-axios";
import type {
  GetAuthLoginByTokenData,
  GetAuthLoginByTokenError,
  GetAuthLoginByTokenResponse,
  GetAutocompleteCompanyData,
  GetAutocompleteCompanyError,
  GetAutocompleteCompanyResponse,
  GetAutocompleteLocationData,
  GetAutocompleteLocationError,
  GetAutocompleteLocationResponse,
  GetAutocompletePositionData,
  GetAutocompletePositionError,
  GetAutocompletePositionResponse,
  GetCompanyPositionData,
  GetCompanyPositionError,
  GetCompanyPositionResponse,
  GetSubmissionsData,
  GetSubmissionsError,
  GetSubmissionsMeData,
  GetSubmissionsMeError,
  GetSubmissionsMeResponse,
  GetSubmissionsResponse,
  PatchSubmissionsData,
  PatchSubmissionsError,
  PatchSubmissionsResponse,
  PostAuthLoginData,
  PostAuthLoginError,
  PostAuthLoginResponse,
  PostCompanyPositionData,
  PostCompanyPositionError,
  PostCompanyPositionResponse,
  PostSubmissionsData,
  PostSubmissionsError,
  PostSubmissionsResponse,
} from "./types.gen";
import axios from "axios";

axios.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response && error.response.status === 401) {
      localStorage.removeItem("access_token");
    }
    return Promise.reject(error);
  },
);
export const client = createClient(
  createConfig({
    axios: axios,
    auth: () => localStorage.getItem("access_token") || "",
    baseURL: "/api/v1",
  }),
);

export class AuthService {
  /**
   * Request a magic link for authentication
   */
  public static postAuthLogin<ThrowOnError extends boolean = false>(
    options: Options<PostAuthLoginData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      PostAuthLoginResponse,
      PostAuthLoginError,
      ThrowOnError
    >({
      url: "/auth/login",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  /**
   * Verify magic link token and authenticate user
   */
  public static getAuthLoginByToken<ThrowOnError extends boolean = false>(
    options: Options<GetAuthLoginByTokenData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetAuthLoginByTokenResponse,
      GetAuthLoginByTokenError,
      ThrowOnError
    >({
      url: "/auth/login/{token}",
      ...options,
    });
  }
}

export class SearchService {
  /**
   * Search for companies by name with fuzzy matching
   */
  public static getAutocompleteCompany<ThrowOnError extends boolean = false>(
    options: Options<GetAutocompleteCompanyData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetAutocompleteCompanyResponse,
      GetAutocompleteCompanyError,
      ThrowOnError
    >({
      url: "/autocomplete/company",
      ...options,
    });
  }

  /**
   * Search for positions within a specific company
   */
  public static getAutocompletePosition<ThrowOnError extends boolean = false>(
    options: Options<GetAutocompletePositionData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetAutocompletePositionResponse,
      GetAutocompletePositionError,
      ThrowOnError
    >({
      url: "/autocomplete/position",
      ...options,
    });
  }

  /**
   * Search for locations with fuzzy matching across city, state, and state code
   */
  public static getAutocompleteLocation<ThrowOnError extends boolean = false>(
    options: Options<GetAutocompleteLocationData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetAutocompleteLocationResponse,
      GetAutocompleteLocationError,
      ThrowOnError
    >({
      url: "/autocomplete/location",
      ...options,
    });
  }
}

export class CompaniesAndPositionsService {
  /**
   * Retrieve companies and positions owned by the authenticated user
   */
  public static getCompanyPosition<ThrowOnError extends boolean = false>(
    options?: Options<GetCompanyPositionData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetCompanyPositionResponse,
      GetCompanyPositionError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/company-position",
      ...options,
    });
  }

  /**
   * Create a new company and position pair
   */
  public static postCompanyPosition<ThrowOnError extends boolean = false>(
    options: Options<PostCompanyPositionData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      PostCompanyPositionResponse,
      PostCompanyPositionError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/company-position",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }
}

export class SubmissionsService {
  /**
   * Retrieve co-op submission records with pagination and filtering
   */
  public static getSubmissions<ThrowOnError extends boolean = false>(
    options?: Options<GetSubmissionsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetSubmissionsResponse,
      GetSubmissionsError,
      ThrowOnError
    >({
      url: "/submissions",
      ...options,
    });
  }

  /**
   * Update an existing co-op submission
   */
  public static patchSubmissions<ThrowOnError extends boolean = false>(
    options: Options<PatchSubmissionsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).patch<
      PatchSubmissionsResponse,
      PatchSubmissionsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/submissions",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  /**
   * Create new co-op submission(s)
   */
  public static postSubmissions<ThrowOnError extends boolean = false>(
    options: Options<PostSubmissionsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      PostSubmissionsResponse,
      PostSubmissionsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/submissions",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  /**
   * Retrieve all co-op submissions owned by the authenticated user
   */
  public static getSubmissionsMe<ThrowOnError extends boolean = false>(
    options?: Options<GetSubmissionsMeData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetSubmissionsMeResponse,
      GetSubmissionsMeError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/submissions/me",
      ...options,
    });
  }
}
