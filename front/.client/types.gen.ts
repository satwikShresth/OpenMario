// This file is auto-generated by @hey-api/openapi-ts

/**
 * A book record with all its properties
 */
export type JWTUser = {
    user_id?: number;
    username?: string;
};
/**
 * A book record with all its properties
 */
export type User = {
    id: number;
    username: string;
    password: string;
};

/**
 * Schema for creating a new book record
 */
export type UserCreate = {
    id?: number;
    username: string;
    password: string;
};

/**
 * A book record with all its properties
 */
export type Book = {
    id: number;
    user_id: number;
    author_id: number;
    title: string;
    pub_year: string;
    genre: string;
};

/**
 * Schema for creating a new book record
 */
export type BookCreate = {
    id?: number;
    user_id?: number;
    author_id?: number;
    /**
     * The title of the book
     */
    title: string;
    /**
     * The year the book was published
     */
    pub_year: string;
    /**
     * The genre of the book
     */
    genre: 'Fiction' | 'Non-Fiction' | 'Mystery' | 'Science Fiction' | 'Fantasy' | 'Romance' | 'Thriller' | 'Horror' | 'Biography' | 'History' | 'Science' | 'Poetry' | 'Drama' | 'Children';
    /**
     * The name of the book's author
     */
    author_name: string;
    /**
     * Optional biography of the author
     */
    author_bio?: string | null;
};

/**
 * Schema for updating an existing book record
 */
export type BookUpdate = {
    id?: number;
    user_id?: number;
    author_id?: number;
    /**
     * The title of the book
     */
    title?: string;
    /**
     * The year the book was published
     */
    pub_year?: string;
    /**
     * The genre of the book
     */
    genre?: 'Fiction' | 'Non-Fiction' | 'Mystery' | 'Science Fiction' | 'Fantasy' | 'Romance' | 'Thriller' | 'Horror' | 'Biography' | 'History' | 'Science' | 'Poetry' | 'Drama' | 'Children';
    /**
     * The updated name of the book's author
     */
    author_name?: string;
    /**
     * Updated biography of the author
     */
    author_bio?: string | null;
};

/**
 * Complete author record with all properties
 */
export type Author = {
    id: number;
    user_id: number;
    name: string;
    bio: string | null;
};

/**
 * Schema for creating a new author record
 */
export type AuthorCreate = {
    id?: number;
    user_id?: number;
    /**
     * Author's full name
     */
    name: string;
    /**
     * Author's biographical information
     */
    bio?: string | null;
};

/**
 * Schema for updating an existing author record
 */
export type AuthorUpdate = {
    id?: number;
    user_id?: number;
    /**
     * Author's full name
     */
    name?: string;
    /**
     * Author's biographical information
     */
    bio?: string | null;
};

export type PostAuthSignupData = {
    body?: UserCreate;
    path?: never;
    query?: never;
    url: '/signup';
};

export type PostAuthSignupErrors = {
    /**
     * Username already exists
     */
    409: unknown;
};

export type PostAuthSignupResponses = {
    /**
     * User created successfully
     */
    201: User;
};

export type PostAuthSignupResponse = PostAuthSignupResponses[keyof PostAuthSignupResponses];

export type PostAuthMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me';
};

export type PostAuthMeErrors = {
    /**
     * Invalid token
     */
    401: unknown;
};

export type PostAuthMeResponses = {
    /**
     * Decoded Token
     */
    200: User;
};

export type PostAuthMeResponse = PostAuthMeResponses[keyof PostAuthMeResponses];

export type PostAuthLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/logout';
};

export type PostAuthLogoutErrors = {
    /**
     * Invalid token
     */
    401: unknown;
};

export type PostAuthLogoutResponses = {
    /**
     * Successfully logged out
     */
    200: unknown;
};

export type PostAuthAccessTokenData = {
    body?: User;
    path?: never;
    query?: never;
    url: '/access-token';
};

export type PostAuthAccessTokenErrors = {
    /**
     * Invalid credentials
     */
    401: unknown;
    /**
     * Username not found
     */
    404: unknown;
};

export type PostAuthAccessTokenResponses = {
    /**
     * Authentication response with user data and JWT token
     */
    200: {
        type: string;
        /**
         * JWT Bearer token
         */
        access_token: string;
    };
};

export type PostAuthAccessTokenResponse = PostAuthAccessTokenResponses[keyof PostAuthAccessTokenResponses];

export type GetBooksData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search by book title (partial match)
         */
        title?: string;
        /**
         * Filter by genre
         */
        genre?: 'Fiction' | 'Non-Fiction' | 'Mystery' | 'Science Fiction' | 'Fantasy' | 'Romance' | 'Thriller' | 'Horror' | 'Biography' | 'History' | 'Science' | 'Poetry' | 'Drama' | 'Children';
        /**
         * Filter by publication year
         */
        pub_year?: string;
    };
    url: '/books';
};

export type GetBooksResponses = {
    /**
     * A book record with all its properties
     */
    200: Array<Book & {
        /**
         * Author's full name
         */
        name: string;
    }>;
};

export type GetBooksResponse = GetBooksResponses[keyof GetBooksResponses];

export type PostBooksData = {
    body?: BookCreate;
    path?: never;
    query?: never;
    url: '/books';
};

export type PostBooksErrors = {
    /**
     * Invalid request body
     */
    400: unknown;
};

export type PostBooksResponses = {
    /**
     * Book created successfully
     */
    201: Book;
};

export type PostBooksResponse = PostBooksResponses[keyof PostBooksResponses];

export type DeleteBooksByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/books/{id}';
};

export type DeleteBooksByIdErrors = {
    /**
     * Book not found
     */
    404: unknown;
};

export type DeleteBooksByIdResponses = {
    /**
     * Book deleted successfully
     */
    204: void;
};

export type DeleteBooksByIdResponse = DeleteBooksByIdResponses[keyof DeleteBooksByIdResponses];

export type GetBooksByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/books/{id}';
};

export type GetBooksByIdErrors = {
    /**
     * Book not found
     */
    404: unknown;
};

export type GetBooksByIdResponses = {
    /**
     * Book details
     */
    200: Book;
};

export type GetBooksByIdResponse = GetBooksByIdResponses[keyof GetBooksByIdResponses];

export type PutBooksByIdData = {
    body?: BookUpdate;
    path: {
        id: number;
    };
    query?: never;
    url: '/books/{id}';
};

export type PutBooksByIdErrors = {
    /**
     * Invalid request body
     */
    400: unknown;
    /**
     * Book not found
     */
    404: unknown;
};

export type PutBooksByIdResponses = {
    /**
     * Book updated successfully
     */
    200: Book;
};

export type PutBooksByIdResponse = PutBooksByIdResponses[keyof PutBooksByIdResponses];

export type GetAuthorsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search by author name (partial match)
         */
        name?: string;
        /**
         * Search within author biography (partial match)
         */
        bio?: string;
    };
    url: '/authors';
};

export type GetAuthorsResponses = {
    /**
     * Success
     */
    200: Array<Author>;
};

export type GetAuthorsResponse = GetAuthorsResponses[keyof GetAuthorsResponses];

export type PostAuthorsData = {
    body?: AuthorCreate;
    path?: never;
    query?: never;
    url: '/authors';
};

export type PostAuthorsErrors = {
    /**
     * Author already exists!
     */
    409: unknown;
};

export type PostAuthorsResponses = {
    /**
     * Created
     */
    201: Author;
};

export type PostAuthorsResponse = PostAuthorsResponses[keyof PostAuthorsResponses];

export type DeleteAuthorsByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/authors/{id}';
};

export type DeleteAuthorsByIdErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Author is a dependency, cannot be deleted!
     */
    409: unknown;
};

export type DeleteAuthorsByIdResponses = {
    /**
     * Response containing the ID of the deleted author
     */
    200: {
        deleted_id: number;
    };
};

export type DeleteAuthorsByIdResponse = DeleteAuthorsByIdResponses[keyof DeleteAuthorsByIdResponses];

export type GetAuthorsByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/authors/{id}';
};

export type GetAuthorsByIdErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetAuthorsByIdResponses = {
    /**
     * Success
     */
    200: Author;
};

export type GetAuthorsByIdResponse = GetAuthorsByIdResponses[keyof GetAuthorsByIdResponses];

export type PutAuthorsByIdData = {
    body?: AuthorUpdate;
    path: {
        id: number;
    };
    query?: never;
    url: '/authors/{id}';
};

export type PutAuthorsByIdErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type PutAuthorsByIdResponses = {
    /**
     * Success
     */
    200: Author;
};

export type PutAuthorsByIdResponse = PutAuthorsByIdResponses[keyof PutAuthorsByIdResponses];
