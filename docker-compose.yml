services:
  database:
    image: postgres:latest
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - app_network 
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}

  prestart:
    build: 
      context: ./back
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
    image: ss5278/openmario:backend
    container_name: prestart
    restart: no
    depends_on:
      database:
        condition: service_healthy
        restart: true
    command:
      - deno
      - task
      - prestart
    networks:
      - app_network 
    env_file:
      - .env


  backend:
    build: 
      context: ./back
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
    image: ss5278/openmario:backend
    container_name: backend
    restart: always
    depends_on:
      database:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
    command:
      - deno
      - task
      - start
    networks:
      - app_network 
    env_file:
      - .env

  reverse-proxy:
    build: 
      context: ./front
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
      args:
          - VITE_API_URL=https://${DOMAIN?Variable not set}/api/v1
          - NODE_ENV=production
    image: ss5278/openmario:reverse-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/config:/config
      - ./caddy/data:/data
    depends_on:
      - database
      - backend
    networks:
      - app_network 

volumes:
  app-db-data:
  caddy_data:
  caddy_config:

networks:
  app_network:
    driver: bridge
