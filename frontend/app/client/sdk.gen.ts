// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetAuthorsData, GetAuthorsResponse, PostAuthorsData, PostAuthorsResponse, GetAuthorsByIdData, GetAuthorsByIdResponse, PutAuthorsByIdData, PutAuthorsByIdResponse, DeleteAuthorsByIdData, DeleteAuthorsByIdResponse, GetBooksData, GetBooksResponse, PostBooksData, PostBooksResponse, GetBooksByIdData, GetBooksByIdResponse, PutBooksByIdData, PutBooksByIdResponse, DeleteBooksByIdData, DeleteBooksByIdResponse } from './types.gen';

export class AuthorsService {
    /**
     * Get all authors
     * @param data The data for the request.
     * @param data.name
     * @param data.bio
     * @returns Author Success
     * @throws ApiError
     */
    public static getAuthors(data: GetAuthorsData = {}): CancelablePromise<GetAuthorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/authors',
            query: {
                name: data.name,
                bio: data.bio
            }
        });
    }
    
    /**
     * Create an author
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Author Created
     * @throws ApiError
     */
    public static postAuthors(data: PostAuthorsData = {}): CancelablePromise<PostAuthorsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/authors',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Get author by id
     * @param data The data for the request.
     * @param data.id
     * @returns Author Success
     * @throws ApiError
     */
    public static getAuthorsById(data: GetAuthorsByIdData): CancelablePromise<GetAuthorsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/authors/{id}',
            path: {
                id: data.id
            },
            errors: {
                404: 'Not found'
            }
        });
    }
    
    /**
     * Update an author
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns Author Success
     * @throws ApiError
     */
    public static putAuthorsById(data: PutAuthorsByIdData): CancelablePromise<PutAuthorsByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/authors/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found'
            }
        });
    }
    
    /**
     * Delete an author
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public static deleteAuthorsById(data: DeleteAuthorsByIdData): CancelablePromise<DeleteAuthorsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/authors/{id}',
            path: {
                id: data.id
            },
            errors: {
                404: 'Not found'
            }
        });
    }
    
}

export class BooksService {
    /**
     * Get all books with optional filtering
     * @param data The data for the request.
     * @param data.title
     * @param data.genre
     * @param data.pubYear
     * @returns Book List of books matching the criteria
     * @throws ApiError
     */
    public static getBooks(data: GetBooksData = {}): CancelablePromise<GetBooksResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/books',
            query: {
                title: data.title,
                genre: data.genre,
                pub_year: data.pubYear
            }
        });
    }
    
    /**
     * Create a new book
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Book Book created successfully
     * @throws ApiError
     */
    public static postBooks(data: PostBooksData = {}): CancelablePromise<PostBooksResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/books',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid request body'
            }
        });
    }
    
    /**
     * Get a book by its ID
     * @param data The data for the request.
     * @param data.id
     * @returns Book Book details
     * @throws ApiError
     */
    public static getBooksById(data: GetBooksByIdData): CancelablePromise<GetBooksByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/books/{id}',
            path: {
                id: data.id
            },
            errors: {
                404: 'Book not found'
            }
        });
    }
    
    /**
     * Update an existing book
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns Book Book updated successfully
     * @throws ApiError
     */
    public static putBooksById(data: PutBooksByIdData): CancelablePromise<PutBooksByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/books/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid request body',
                404: 'Book not found'
            }
        });
    }
    
    /**
     * Delete a book
     * @param data The data for the request.
     * @param data.id
     * @returns void Book deleted successfully
     * @throws ApiError
     */
    public static deleteBooksById(data: DeleteBooksByIdData): CancelablePromise<DeleteBooksByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/books/{id}',
            path: {
                id: data.id
            },
            errors: {
                404: 'Book not found'
            }
        });
    }
    
}
