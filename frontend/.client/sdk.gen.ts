// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { GetBooksData, GetBooksResponse, PostBooksData, PostBooksResponse, DeleteBooksByIdData, DeleteBooksByIdResponse, GetBooksByIdData, GetBooksByIdResponse, PutBooksByIdData, PutBooksByIdResponse, GetAuthorsData, GetAuthorsResponse, PostAuthorsData, PostAuthorsResponse, DeleteAuthorsByIdData, DeleteAuthorsByIdResponse, GetAuthorsByIdData, GetAuthorsByIdResponse, PutAuthorsByIdData, PutAuthorsByIdResponse } from './types.gen';
import { zGetBooksResponse, zPostBooksResponse, zDeleteBooksByIdResponse, zGetBooksByIdResponse, zPutBooksByIdResponse, zGetAuthorsResponse, zPostAuthorsResponse, zDeleteAuthorsByIdResponse, zGetAuthorsByIdResponse, zPutAuthorsByIdResponse } from './zod.gen';

export const client = createClient(createConfig());

export class BooksService {
    /**
     * Get all books with optional filtering
     */
    public static getBooks<ThrowOnError extends boolean = false>(options?: Options<GetBooksData, ThrowOnError>) {
        return (options?.client ?? client).get<GetBooksResponse, unknown, ThrowOnError>({
            responseValidator: async (data) => {
                return await zGetBooksResponse.parseAsync(data);
            },
            url: '/books',
            ...options
        });
    }

    /**
     * Create a new book
     */
    public static postBooks<ThrowOnError extends boolean = false>(options?: Options<PostBooksData, ThrowOnError>) {
        return (options?.client ?? client).post<PostBooksResponse, unknown, ThrowOnError>({
            responseValidator: async (data) => {
                return await zPostBooksResponse.parseAsync(data);
            },
            url: '/books',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }

    /**
     * Delete a book
     */
    public static deleteBooksById<ThrowOnError extends boolean = false>(options: Options<DeleteBooksByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteBooksByIdResponse, unknown, ThrowOnError>({
            responseValidator: async (data) => {
                return await zDeleteBooksByIdResponse.parseAsync(data);
            },
            url: '/books/{id}',
            ...options
        });
    }

    /**
     * Get a book by its ID
     */
    public static getBooksById<ThrowOnError extends boolean = false>(options: Options<GetBooksByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetBooksByIdResponse, unknown, ThrowOnError>({
            responseValidator: async (data) => {
                return await zGetBooksByIdResponse.parseAsync(data);
            },
            url: '/books/{id}',
            ...options
        });
    }

    /**
     * Update an existing book
     */
    public static putBooksById<ThrowOnError extends boolean = false>(options: Options<PutBooksByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutBooksByIdResponse, unknown, ThrowOnError>({
            responseValidator: async (data) => {
                return await zPutBooksByIdResponse.parseAsync(data);
            },
            url: '/books/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }

}

export class AuthorsService {
    /**
     * Get all authors
     */
    public static getAuthors<ThrowOnError extends boolean = false>(options?: Options<GetAuthorsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAuthorsResponse, unknown, ThrowOnError>({
            responseValidator: async (data) => {
                return await zGetAuthorsResponse.parseAsync(data);
            },
            url: '/authors',
            ...options
        });
    }

    /**
     * Create an author
     */
    public static postAuthors<ThrowOnError extends boolean = false>(options?: Options<PostAuthorsData, ThrowOnError>) {
        return (options?.client ?? client).post<PostAuthorsResponse, unknown, ThrowOnError>({
            responseValidator: async (data) => {
                return await zPostAuthorsResponse.parseAsync(data);
            },
            url: '/authors',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }

    /**
     * Delete an author
     */
    public static deleteAuthorsById<ThrowOnError extends boolean = false>(options: Options<DeleteAuthorsByIdData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteAuthorsByIdResponse, unknown, ThrowOnError>({
            responseValidator: async (data) => {
                return await zDeleteAuthorsByIdResponse.parseAsync(data);
            },
            url: '/authors/{id}',
            ...options
        });
    }

    /**
     * Get author by id
     */
    public static getAuthorsById<ThrowOnError extends boolean = false>(options: Options<GetAuthorsByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAuthorsByIdResponse, unknown, ThrowOnError>({
            responseValidator: async (data) => {
                return await zGetAuthorsByIdResponse.parseAsync(data);
            },
            url: '/authors/{id}',
            ...options
        });
    }

    /**
     * Update an author
     */
    public static putAuthorsById<ThrowOnError extends boolean = false>(options: Options<PutAuthorsByIdData, ThrowOnError>) {
        return (options?.client ?? client).put<PutAuthorsByIdResponse, unknown, ThrowOnError>({
            responseValidator: async (data) => {
                return await zPutAuthorsByIdResponse.parseAsync(data);
            },
            url: '/authors/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }

}
