// This file is auto-generated by @hey-api/openapi-ts

export type SearchTokenResponse = {
    token: string;
};

export type TokenErrorResponse = {
    message: string;
    details: string;
};

export type ErrorResponse = {
    message: string;
};

export type SuccessResponse = {
    message: string;
};

export type Login = {
    email: string;
};

export type LoginResponse = {
    access_token: string;
    token_type: string;
};

export type CompanyPositionListResponse = {
    data: Array<CompanyPositionItem>;
};

export type CompanyPositionItem = {
    company_id: string | null;
    position_id: string | null;
    company_name: string;
    position_name: string;
};

export type CompanyPositionCreateResponse = {
    company_id: string;
    position_id: string;
    message: string;
};

export type CompanyPostionInsert = {
    company: string;
    position: string;
};

export type SubmissionListResponse = {
    pageIndex: number;
    pageSize: number;
    count: number;
    data: Array<SubmissionListItem>;
};

export type SubmissionListItem = {
    year: number;
    coop_year: string;
    coop_cycle: string;
    program_level: string;
    work_hours: number;
    compensation: number;
    other_compensation: string | null;
    details: string | null;
    company: string;
    position: string;
    location_city: string;
    location_state: string;
    location_state_code: string;
};

export type SubmissionCreateResponse = {
    id: string;
    owner_id: string | null;
    message: string;
};

export type SubmissionAggregate = {
    company: string;
    position: string;
    location: string;
    work_hours: number;
    compensation: number;
    other_compensation: string;
    details: string;
    year: number;
    coop_year: '1st' | '2nd' | '3rd';
    coop_cycle: 'Fall/Winter' | 'Winter/Spring' | 'Spring/Summer' | 'Summer/Fall';
    program_level: 'Undergraduate' | 'Graduate';
};

export type SubmissionUpdateResponse = {
    message: string;
};

export type SubmissionMeResponse = {
    data: Array<SubmissionItem>;
};

export type SubmissionItem = {
    id: string;
    owner_id: string | null;
    year: number;
    coop_year: string;
    coop_cycle: string;
    program_level: string;
    work_hours: number;
    compensation: number;
    other_compensation: string | null;
    details: string | null;
    company: string;
    position: string;
    location_city: string;
    location_state: string;
    location_state_code: string;
    location: string;
};

export type CompanyListResponse = Array<CompanyResult>;

export type CompanyResult = {
    id: string;
    name: string;
};

export type PositionListResponse = Array<PositionResult>;

export type PositionResult = {
    id: string;
    name: string;
};

export type LocationListResponse = Array<LocationResult>;

export type LocationResult = {
    id: string;
    name: string;
};

export type GetV1AuthSearchTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/auth/search-token';
};

export type GetV1AuthSearchTokenErrors = {
    /**
     * Unauthorized
     */
    401: TokenErrorResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetV1AuthSearchTokenError = GetV1AuthSearchTokenErrors[keyof GetV1AuthSearchTokenErrors];

export type GetV1AuthSearchTokenResponses = {
    /**
     * Successfully generated tenant token
     */
    200: SearchTokenResponse;
};

export type GetV1AuthSearchTokenResponse = GetV1AuthSearchTokenResponses[keyof GetV1AuthSearchTokenResponses];

export type PostV1AuthLoginData = {
    body?: Login;
    path?: never;
    query?: never;
    url: '/v1/auth/login';
};

export type PostV1AuthLoginErrors = {
    /**
     * Unauthorized
     */
    401: TokenErrorResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type PostV1AuthLoginError = PostV1AuthLoginErrors[keyof PostV1AuthLoginErrors];

export type PostV1AuthLoginResponses = {
    /**
     * Magic link sent successfully
     */
    200: SuccessResponse;
};

export type PostV1AuthLoginResponse = PostV1AuthLoginResponses[keyof PostV1AuthLoginResponses];

export type GetV1AuthLoginByTokenData = {
    body?: never;
    path: {
        token: string;
    };
    query?: never;
    url: '/v1/auth/login/{token}';
};

export type GetV1AuthLoginByTokenErrors = {
    /**
     * Unauthorized
     */
    401: TokenErrorResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetV1AuthLoginByTokenError = GetV1AuthLoginByTokenErrors[keyof GetV1AuthLoginByTokenErrors];

export type GetV1AuthLoginByTokenResponses = {
    /**
     * User authenticated successfully
     */
    200: LoginResponse;
};

export type GetV1AuthLoginByTokenResponse = GetV1AuthLoginByTokenResponses[keyof GetV1AuthLoginByTokenResponses];

export type GetV1CompanyPositionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/company-position';
};

export type GetV1CompanyPositionErrors = {
    /**
     * Error response
     */
    409: ErrorResponse;
};

export type GetV1CompanyPositionError = GetV1CompanyPositionErrors[keyof GetV1CompanyPositionErrors];

export type GetV1CompanyPositionResponses = {
    /**
     * Success response with user's companies and positions
     */
    200: CompanyPositionListResponse;
};

export type GetV1CompanyPositionResponse = GetV1CompanyPositionResponses[keyof GetV1CompanyPositionResponses];

export type PostV1CompanyPositionData = {
    body?: CompanyPostionInsert;
    path?: never;
    query?: never;
    url: '/v1/company-position';
};

export type PostV1CompanyPositionErrors = {
    /**
     * Error response - position already exists or creation failed
     */
    409: ErrorResponse;
};

export type PostV1CompanyPositionError = PostV1CompanyPositionErrors[keyof PostV1CompanyPositionErrors];

export type PostV1CompanyPositionResponses = {
    /**
     * Success
     */
    200: CompanyPositionListResponse;
    /**
     * Successfully created company and position
     */
    201: CompanyPositionCreateResponse;
};

export type PostV1CompanyPositionResponse = PostV1CompanyPositionResponses[keyof PostV1CompanyPositionResponses];

export type GetV1SubmissionsData = {
    body?: never;
    path?: never;
    query: {
        company?: Array<string>;
        position?: Array<string>;
        location?: Array<string>;
        year?: Array<number>;
        coop_year?: Array<'1st' | '2nd' | '3rd'>;
        coop_cycle?: Array<'Fall/Winter' | 'Winter/Spring' | 'Spring/Summer' | 'Summer/Fall'>;
        program_level?: 'Undergraduate' | 'Graduate';
        pageIndex?: number;
        pageSize?: number;
        distinct: boolean;
    };
    url: '/v1/submissions';
};

export type GetV1SubmissionsErrors = {
    /**
     * Error response
     */
    409: ErrorResponse;
};

export type GetV1SubmissionsError = GetV1SubmissionsErrors[keyof GetV1SubmissionsErrors];

export type GetV1SubmissionsResponses = {
    /**
     * Paginated list of submission records
     */
    200: SubmissionListResponse;
};

export type GetV1SubmissionsResponse = GetV1SubmissionsResponses[keyof GetV1SubmissionsResponses];

export type PatchV1SubmissionsData = {
    body?: SubmissionAggregate;
    path?: never;
    query?: never;
    url: '/v1/submissions';
};

export type PatchV1SubmissionsErrors = {
    /**
     * Error response
     */
    409: ErrorResponse;
};

export type PatchV1SubmissionsError = PatchV1SubmissionsErrors[keyof PatchV1SubmissionsErrors];

export type PatchV1SubmissionsResponses = {
    /**
     * Success
     */
    200: SubmissionListResponse;
    /**
     * Successfully updated submission
     */
    201: SubmissionUpdateResponse;
};

export type PatchV1SubmissionsResponse = PatchV1SubmissionsResponses[keyof PatchV1SubmissionsResponses];

export type PostV1SubmissionsData = {
    body?: SubmissionAggregate;
    path?: never;
    query?: never;
    url: '/v1/submissions';
};

export type PostV1SubmissionsErrors = {
    /**
     * Error response
     */
    409: ErrorResponse;
};

export type PostV1SubmissionsError = PostV1SubmissionsErrors[keyof PostV1SubmissionsErrors];

export type PostV1SubmissionsResponses = {
    /**
     * Success
     */
    200: SubmissionListResponse;
    /**
     * Successfully created submission
     */
    201: SubmissionCreateResponse;
};

export type PostV1SubmissionsResponse = PostV1SubmissionsResponses[keyof PostV1SubmissionsResponses];

export type GetV1SubmissionsMeData = {
    body?: never;
    path?: never;
    query?: {
        ids?: Array<string>;
    };
    url: '/v1/submissions/me';
};

export type GetV1SubmissionsMeErrors = {
    /**
     * Error response
     */
    409: ErrorResponse;
};

export type GetV1SubmissionsMeError = GetV1SubmissionsMeErrors[keyof GetV1SubmissionsMeErrors];

export type GetV1SubmissionsMeResponses = {
    /**
     * List of user's submissions
     */
    200: SubmissionMeResponse;
};

export type GetV1SubmissionsMeResponse = GetV1SubmissionsMeResponses[keyof GetV1SubmissionsMeResponses];

export type GetV1AutocompleteCompanyData = {
    body?: never;
    path?: never;
    query: {
        comp: string;
    };
    url: '/v1/autocomplete/company';
};

export type GetV1AutocompleteCompanyErrors = {
    /**
     * Database query failed
     */
    409: ErrorResponse;
};

export type GetV1AutocompleteCompanyError = GetV1AutocompleteCompanyErrors[keyof GetV1AutocompleteCompanyErrors];

export type GetV1AutocompleteCompanyResponses = {
    /**
     * List of matching company names
     */
    200: CompanyListResponse;
};

export type GetV1AutocompleteCompanyResponse = GetV1AutocompleteCompanyResponses[keyof GetV1AutocompleteCompanyResponses];

export type GetV1AutocompletePositionData = {
    body?: never;
    path?: never;
    query: {
        comp: string;
        pos?: string;
    };
    url: '/v1/autocomplete/position';
};

export type GetV1AutocompletePositionErrors = {
    /**
     * Database query failed
     */
    409: ErrorResponse;
};

export type GetV1AutocompletePositionError = GetV1AutocompletePositionErrors[keyof GetV1AutocompletePositionErrors];

export type GetV1AutocompletePositionResponses = {
    /**
     * List of matching position titles
     */
    200: PositionListResponse;
};

export type GetV1AutocompletePositionResponse = GetV1AutocompletePositionResponses[keyof GetV1AutocompletePositionResponses];

export type GetV1AutocompleteLocationData = {
    body?: never;
    path?: never;
    query: {
        loc: string;
    };
    url: '/v1/autocomplete/location';
};

export type GetV1AutocompleteLocationErrors = {
    /**
     * Database query failed
     */
    409: ErrorResponse;
};

export type GetV1AutocompleteLocationError = GetV1AutocompleteLocationErrors[keyof GetV1AutocompleteLocationErrors];

export type GetV1AutocompleteLocationResponses = {
    /**
     * List of matching locations in "City, State_Code" format
     */
    200: LocationListResponse;
};

export type GetV1AutocompleteLocationResponse = GetV1AutocompleteLocationResponses[keyof GetV1AutocompleteLocationResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:3000' | (string & {});
};