// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from './client';
import type {
   GetV1AuthSearchTokenData,
   GetV1AuthSearchTokenErrors,
   GetV1AuthSearchTokenResponses,
   GetV1AutocompleteCompanyData,
   GetV1AutocompleteCompanyErrors,
   GetV1AutocompleteCompanyResponses,
   GetV1AutocompleteLocationData,
   GetV1AutocompleteLocationErrors,
   GetV1AutocompleteLocationResponses,
   GetV1AutocompletePositionData,
   GetV1AutocompletePositionErrors,
   GetV1AutocompletePositionResponses,
   GetV1GraphCoursesAvailabilitiesByCourseIdData,
   GetV1GraphCoursesAvailabilitiesByCourseIdErrors,
   GetV1GraphCoursesAvailabilitiesByCourseIdResponses,
   GetV1GraphCoursesByCourseIdData,
   GetV1GraphCoursesByCourseIdErrors,
   GetV1GraphCoursesByCourseIdResponses,
   GetV1GraphReqByCourseIdData,
   GetV1GraphReqByCourseIdErrors,
   GetV1GraphReqByCourseIdResponses,
   GetV1SubmissionsData,
   GetV1SubmissionsErrors,
   GetV1SubmissionsMeData,
   GetV1SubmissionsMeErrors,
   GetV1SubmissionsMeResponses,
   GetV1SubmissionsResponses,
   PatchV1SubmissionsData,
   PatchV1SubmissionsErrors,
   PatchV1SubmissionsResponses,
   PostV1CompanyData,
   PostV1CompanyErrors,
   PostV1CompanyResponses,
   PostV1PositionData,
   PostV1PositionErrors,
   PostV1PositionResponses,
   PostV1SubmissionsData,
   PostV1SubmissionsErrors,
   PostV1SubmissionsResponses,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> =
   & ClientOptions<TData, ThrowOnError>
   & {
      /**
       * You can provide a client instance returned by `createClient()` instead of
       * individual options. This might be also useful if you want to implement a
       * custom client.
       */
      client?: Client;
      /**
       * You can pass arbitrary values through the `meta` object. This can be
       * used to access values that aren't defined as part of the SDK function.
       */
      meta?: Record<string, unknown>;
   };

/**
 * Retrieve prerequisites and corequisites for a specific course
 */
export const getV1GraphReqByCourseId = <ThrowOnError extends boolean = false>(
   options: Options<GetV1GraphReqByCourseIdData, ThrowOnError>,
) => {
   return (options.client ?? _heyApiClient).get<
      GetV1GraphReqByCourseIdResponses,
      GetV1GraphReqByCourseIdErrors,
      ThrowOnError
   >({
      url: '/v1/graph/req/{course_id}',
      ...options,
   });
};

/**
 * Retrieve all attributes for a specific course
 */
export const getV1GraphCoursesByCourseId = <ThrowOnError extends boolean = false>(
   options: Options<GetV1GraphCoursesByCourseIdData, ThrowOnError>,
) => {
   return (options.client ?? _heyApiClient).get<
      GetV1GraphCoursesByCourseIdResponses,
      GetV1GraphCoursesByCourseIdErrors,
      ThrowOnError
   >({
      url: '/v1/graph/courses/{course_id}',
      ...options,
   });
};

/**
 * Retrieve all sections available for a specific course across all terms
 */
export const getV1GraphCoursesAvailabilitiesByCourseId = <ThrowOnError extends boolean = false>(
   options: Options<GetV1GraphCoursesAvailabilitiesByCourseIdData, ThrowOnError>,
) => {
   return (options.client ?? _heyApiClient).get<
      GetV1GraphCoursesAvailabilitiesByCourseIdResponses,
      GetV1GraphCoursesAvailabilitiesByCourseIdErrors,
      ThrowOnError
   >({
      url: '/v1/graph/courses/availabilities/{course_id}',
      ...options,
   });
};

/**
 * Get a tenant token for searching, filtering, and sorting (expires in 1 day)
 */
export const getV1AuthSearchToken = <ThrowOnError extends boolean = false>(
   options?: Options<GetV1AuthSearchTokenData, ThrowOnError>,
) => {
   return (options?.client ?? _heyApiClient).get<
      GetV1AuthSearchTokenResponses,
      GetV1AuthSearchTokenErrors,
      ThrowOnError
   >({
      url: '/v1/auth/search-token',
      ...options,
   });
};

/**
 * Create a new company
 */
export const postV1Company = <ThrowOnError extends boolean = false>(
   options?: Options<PostV1CompanyData, ThrowOnError>,
) => {
   return (options?.client ?? _heyApiClient).post<
      PostV1CompanyResponses,
      PostV1CompanyErrors,
      ThrowOnError
   >({
      url: '/v1/company',
      ...options,
      headers: {
         'Content-Type': 'application/json',
         ...options?.headers,
      },
   });
};

/**
 * Create a new position for an existing company using company name
 */
export const postV1Position = <ThrowOnError extends boolean = false>(
   options?: Options<PostV1PositionData, ThrowOnError>,
) => {
   return (options?.client ?? _heyApiClient).post<
      PostV1PositionResponses,
      PostV1PositionErrors,
      ThrowOnError
   >({
      url: '/v1/position',
      ...options,
      headers: {
         'Content-Type': 'application/json',
         ...options?.headers,
      },
   });
};

/**
 * Retrieve co-op submission records with pagination and filtering
 */
export const getV1Submissions = <ThrowOnError extends boolean = false>(
   options: Options<GetV1SubmissionsData, ThrowOnError>,
) => {
   return (options.client ?? _heyApiClient).get<
      GetV1SubmissionsResponses,
      GetV1SubmissionsErrors,
      ThrowOnError
   >({
      url: '/v1/submissions',
      ...options,
   });
};

/**
 * Update an existing co-op submission
 */
export const patchV1Submissions = <ThrowOnError extends boolean = false>(
   options?: Options<PatchV1SubmissionsData, ThrowOnError>,
) => {
   return (options?.client ?? _heyApiClient).patch<
      PatchV1SubmissionsResponses,
      PatchV1SubmissionsErrors,
      ThrowOnError
   >({
      url: '/v1/submissions',
      ...options,
      headers: {
         'Content-Type': 'application/json',
         ...options?.headers,
      },
   });
};

/**
 * Create new co-op submission(s)
 */
export const postV1Submissions = <ThrowOnError extends boolean = false>(
   options?: Options<PostV1SubmissionsData, ThrowOnError>,
) => {
   return (options?.client ?? _heyApiClient).post<
      PostV1SubmissionsResponses,
      PostV1SubmissionsErrors,
      ThrowOnError
   >({
      url: '/v1/submissions',
      ...options,
      headers: {
         'Content-Type': 'application/json',
         ...options?.headers,
      },
   });
};

/**
 * Retrieve all co-op submissions owned by the authenticated user
 */
export const getV1SubmissionsMe = <ThrowOnError extends boolean = false>(
   options?: Options<GetV1SubmissionsMeData, ThrowOnError>,
) => {
   return (options?.client ?? _heyApiClient).get<
      GetV1SubmissionsMeResponses,
      GetV1SubmissionsMeErrors,
      ThrowOnError
   >({
      url: '/v1/submissions/me',
      ...options,
   });
};

/**
 * Search for companies by name with fuzzy matching
 */
export const getV1AutocompleteCompany = <ThrowOnError extends boolean = false>(
   options: Options<GetV1AutocompleteCompanyData, ThrowOnError>,
) => {
   return (options.client ?? _heyApiClient).get<
      GetV1AutocompleteCompanyResponses,
      GetV1AutocompleteCompanyErrors,
      ThrowOnError
   >({
      url: '/v1/autocomplete/company',
      ...options,
   });
};

/**
 * Search for positions within a specific company
 */
export const getV1AutocompletePosition = <ThrowOnError extends boolean = false>(
   options: Options<GetV1AutocompletePositionData, ThrowOnError>,
) => {
   return (options.client ?? _heyApiClient).get<
      GetV1AutocompletePositionResponses,
      GetV1AutocompletePositionErrors,
      ThrowOnError
   >({
      url: '/v1/autocomplete/position',
      ...options,
   });
};

/**
 * Search for locations with fuzzy matching across city, state, and state code
 */
export const getV1AutocompleteLocation = <ThrowOnError extends boolean = false>(
   options: Options<GetV1AutocompleteLocationData, ThrowOnError>,
) => {
   return (options.client ?? _heyApiClient).get<
      GetV1AutocompleteLocationResponses,
      GetV1AutocompleteLocationErrors,
      ThrowOnError
   >({
      url: '/v1/autocomplete/location',
      ...options,
   });
};
