import {
   CancelledError,
   dataTagErrorSymbol,
   dataTagSymbol,
   defaultScheduler,
   defaultShouldDehydrateMutation,
   defaultShouldDehydrateQuery,
   dehydrate,
   focusManager,
   hashKey,
   hydrate,
   HydrationBoundary,
   InfiniteQueryObserver,
   infiniteQueryOptions,
   isCancelledError,
   IsRestoringProvider,
   isServer,
   keepPreviousData,
   matchMutation,
   matchQuery,
   Mutation,
   MutationCache,
   MutationObserver,
   mutationOptions,
   noop,
   notifyManager,
   onlineManager,
   partialMatchKey,
   QueriesObserver,
   Query,
   QueryCache,
   QueryClient,
   QueryClientContext,
   QueryClientProvider,
   QueryErrorResetBoundary,
   QueryObserver,
   queryOptions,
   replaceEqualDeep,
   shouldThrowError,
   skipToken,
   streamedQuery,
   unsetMarker,
   useInfiniteQuery,
   useIsFetching,
   useIsMutating,
   useIsRestoring,
   useMutation,
   useMutationState,
   usePrefetchInfiniteQuery,
   usePrefetchQuery,
   useQueries,
   useQuery,
   useQueryClient,
   useQueryErrorResetBoundary,
   useSuspenseInfiniteQuery,
   useSuspenseQueries,
   useSuspenseQuery,
} from './chunk-3U56OLN7.js';
import './chunk-JY6JHD56.js';
import './chunk-JZ6RMLDG.js';
import './chunk-WOOG5QLI.js';
export {
   CancelledError,
   dataTagErrorSymbol,
   dataTagSymbol,
   defaultScheduler,
   defaultShouldDehydrateMutation,
   defaultShouldDehydrateQuery,
   dehydrate,
   focusManager,
   hashKey,
   hydrate,
   HydrationBoundary,
   InfiniteQueryObserver,
   infiniteQueryOptions,
   isCancelledError,
   IsRestoringProvider,
   isServer,
   keepPreviousData,
   matchMutation,
   matchQuery,
   Mutation,
   MutationCache,
   MutationObserver,
   mutationOptions,
   noop,
   notifyManager,
   onlineManager,
   partialMatchKey,
   QueriesObserver,
   Query,
   QueryCache,
   QueryClient,
   QueryClientContext,
   QueryClientProvider,
   QueryErrorResetBoundary,
   QueryObserver,
   queryOptions,
   replaceEqualDeep,
   shouldThrowError,
   skipToken,
   streamedQuery as experimental_streamedQuery,
   unsetMarker,
   useInfiniteQuery,
   useIsFetching,
   useIsMutating,
   useIsRestoring,
   useMutation,
   useMutationState,
   usePrefetchInfiniteQuery,
   usePrefetchQuery,
   useQueries,
   useQuery,
   useQueryClient,
   useQueryErrorResetBoundary,
   useSuspenseInfiniteQuery,
   useSuspenseQueries,
   useSuspenseQuery,
};
