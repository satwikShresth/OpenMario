// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from './client';
import type {
   GetV1AuthLoginByTokenData,
   GetV1AuthLoginByTokenErrors,
   GetV1AuthLoginByTokenResponses,
   GetV1AuthSearchTokenData,
   GetV1AuthSearchTokenErrors,
   GetV1AuthSearchTokenResponses,
   GetV1AutocompleteCompanyData,
   GetV1AutocompleteCompanyErrors,
   GetV1AutocompleteCompanyResponses,
   GetV1AutocompleteLocationData,
   GetV1AutocompleteLocationErrors,
   GetV1AutocompleteLocationResponses,
   GetV1AutocompletePositionData,
   GetV1AutocompletePositionErrors,
   GetV1AutocompletePositionResponses,
   GetV1CompanyPositionData,
   GetV1CompanyPositionErrors,
   GetV1CompanyPositionResponses,
   GetV1SubmissionsData,
   GetV1SubmissionsErrors,
   GetV1SubmissionsMeData,
   GetV1SubmissionsMeErrors,
   GetV1SubmissionsMeResponses,
   GetV1SubmissionsResponses,
   PatchV1SubmissionsData,
   PatchV1SubmissionsErrors,
   PatchV1SubmissionsResponses,
   PostV1AuthLoginData,
   PostV1AuthLoginErrors,
   PostV1AuthLoginResponses,
   PostV1CompanyPositionData,
   PostV1CompanyPositionErrors,
   PostV1CompanyPositionResponses,
   PostV1SubmissionsData,
   PostV1SubmissionsErrors,
   PostV1SubmissionsResponses,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
   TData extends TDataShape = TDataShape,
   ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
   /**
    * You can provide a client instance returned by `createClient()` instead of
    * individual options. This might be also useful if you want to implement a
    * custom client.
    */
   client?: Client;
   /**
    * You can pass arbitrary values through the `meta` object. This can be
    * used to access values that aren't defined as part of the SDK function.
    */
   meta?: Record<string, unknown>;
};

/**
 * Get a tenant token for searching, filtering, and sorting (expires in 1 day)
 */
export const getV1AuthSearchToken = <ThrowOnError extends boolean = false>(
   options?: Options<GetV1AuthSearchTokenData, ThrowOnError>,
) => {
   return (options?.client ?? _heyApiClient).get<
      GetV1AuthSearchTokenResponses,
      GetV1AuthSearchTokenErrors,
      ThrowOnError
   >({
      url: '/v1/auth/search-token',
      ...options,
   });
};

/**
 * Request a magic link for authentication
 */
export const postV1AuthLogin = <ThrowOnError extends boolean = false>(
   options?: Options<PostV1AuthLoginData, ThrowOnError>,
) => {
   return (options?.client ?? _heyApiClient).post<
      PostV1AuthLoginResponses,
      PostV1AuthLoginErrors,
      ThrowOnError
   >({
      url: '/v1/auth/login',
      ...options,
      headers: {
         'Content-Type': 'application/json',
         ...options?.headers,
      },
   });
};

/**
 * Verify magic link token and authenticate user
 */
export const getV1AuthLoginByToken = <ThrowOnError extends boolean = false>(
   options: Options<GetV1AuthLoginByTokenData, ThrowOnError>,
) => {
   return (options.client ?? _heyApiClient).get<
      GetV1AuthLoginByTokenResponses,
      GetV1AuthLoginByTokenErrors,
      ThrowOnError
   >({
      url: '/v1/auth/login/{token}',
      ...options,
   });
};

/**
 * Retrieve companies and positions owned by the authenticated user
 */
export const getV1CompanyPosition = <ThrowOnError extends boolean = false>(
   options?: Options<GetV1CompanyPositionData, ThrowOnError>,
) => {
   return (options?.client ?? _heyApiClient).get<
      GetV1CompanyPositionResponses,
      GetV1CompanyPositionErrors,
      ThrowOnError
   >({
      url: '/v1/company-position',
      ...options,
   });
};

/**
 * Create a new company and position pair
 */
export const postV1CompanyPosition = <ThrowOnError extends boolean = false>(
   options?: Options<PostV1CompanyPositionData, ThrowOnError>,
) => {
   return (options?.client ?? _heyApiClient).post<
      PostV1CompanyPositionResponses,
      PostV1CompanyPositionErrors,
      ThrowOnError
   >({
      url: '/v1/company-position',
      ...options,
      headers: {
         'Content-Type': 'application/json',
         ...options?.headers,
      },
   });
};

/**
 * Retrieve co-op submission records with pagination and filtering
 */
export const getV1Submissions = <ThrowOnError extends boolean = false>(
   options: Options<GetV1SubmissionsData, ThrowOnError>,
) => {
   return (options.client ?? _heyApiClient).get<
      GetV1SubmissionsResponses,
      GetV1SubmissionsErrors,
      ThrowOnError
   >({
      url: '/v1/submissions',
      ...options,
   });
};

/**
 * Update an existing co-op submission
 */
export const patchV1Submissions = <ThrowOnError extends boolean = false>(
   options?: Options<PatchV1SubmissionsData, ThrowOnError>,
) => {
   return (options?.client ?? _heyApiClient).patch<
      PatchV1SubmissionsResponses,
      PatchV1SubmissionsErrors,
      ThrowOnError
   >({
      url: '/v1/submissions',
      ...options,
      headers: {
         'Content-Type': 'application/json',
         ...options?.headers,
      },
   });
};

/**
 * Create new co-op submission(s)
 */
export const postV1Submissions = <ThrowOnError extends boolean = false>(
   options?: Options<PostV1SubmissionsData, ThrowOnError>,
) => {
   return (options?.client ?? _heyApiClient).post<
      PostV1SubmissionsResponses,
      PostV1SubmissionsErrors,
      ThrowOnError
   >({
      url: '/v1/submissions',
      ...options,
      headers: {
         'Content-Type': 'application/json',
         ...options?.headers,
      },
   });
};

/**
 * Retrieve all co-op submissions owned by the authenticated user
 */
export const getV1SubmissionsMe = <ThrowOnError extends boolean = false>(
   options?: Options<GetV1SubmissionsMeData, ThrowOnError>,
) => {
   return (options?.client ?? _heyApiClient).get<
      GetV1SubmissionsMeResponses,
      GetV1SubmissionsMeErrors,
      ThrowOnError
   >({
      url: '/v1/submissions/me',
      ...options,
   });
};

/**
 * Search for companies by name with fuzzy matching
 */
export const getV1AutocompleteCompany = <ThrowOnError extends boolean = false>(
   options: Options<GetV1AutocompleteCompanyData, ThrowOnError>,
) => {
   return (options.client ?? _heyApiClient).get<
      GetV1AutocompleteCompanyResponses,
      GetV1AutocompleteCompanyErrors,
      ThrowOnError
   >({
      url: '/v1/autocomplete/company',
      ...options,
   });
};

/**
 * Search for positions within a specific company
 */
export const getV1AutocompletePosition = <ThrowOnError extends boolean = false>(
   options: Options<GetV1AutocompletePositionData, ThrowOnError>,
) => {
   return (options.client ?? _heyApiClient).get<
      GetV1AutocompletePositionResponses,
      GetV1AutocompletePositionErrors,
      ThrowOnError
   >({
      url: '/v1/autocomplete/position',
      ...options,
   });
};

/**
 * Search for locations with fuzzy matching across city, state, and state code
 */
export const getV1AutocompleteLocation = <ThrowOnError extends boolean = false>(
   options: Options<GetV1AutocompleteLocationData, ThrowOnError>,
) => {
   return (options.client ?? _heyApiClient).get<
      GetV1AutocompleteLocationResponses,
      GetV1AutocompleteLocationErrors,
      ThrowOnError
   >({
      url: '/v1/autocomplete/location',
      ...options,
   });
};
