// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from './client'
import type {
  GetAuthLoginByTokenData,
  GetAuthSearchTokenData,
  GetAutocompleteCompanyData,
  GetAutocompleteCompanyErrors,
  GetAutocompleteCompanyResponses,
  GetAutocompleteLocationData,
  GetAutocompleteLocationErrors,
  GetAutocompleteLocationResponses,
  GetAutocompletePositionData,
  GetAutocompletePositionErrors,
  GetAutocompletePositionResponses,
  GetCompanyPositionData,
  GetCompanyPositionErrors,
  GetCompanyPositionResponses,
  GetSubmissionsData,
  GetSubmissionsMeData,
  PatchSubmissionsData,
  PostAuthLoginData,
  PostCompanyPositionData,
  PostCompanyPositionErrors,
  PostCompanyPositionResponses,
  PostSubmissionsData,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Get a tenant token for searching, filtering, and sorting (expires in 1 day)
 */
export const getAuthSearchToken = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthSearchTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: '/auth/search-token',
      ...options,
    },
  )
}

/**
 * Request a magic link for authentication
 */
export const postAuthLogin = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      url: '/auth/login',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    },
  )
}

/**
 * Verify magic link token and authenticate user
 */
export const getAuthLoginByToken = <ThrowOnError extends boolean = false>(
  options: Options<GetAuthLoginByTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: '/auth/login/{token}',
    ...options,
  })
}

/**
 * Search for companies by name with fuzzy matching
 */
export const getAutocompleteCompany = <ThrowOnError extends boolean = false>(
  options: Options<GetAutocompleteCompanyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAutocompleteCompanyResponses,
    GetAutocompleteCompanyErrors,
    ThrowOnError
  >({
    url: '/autocomplete/company',
    ...options,
  })
}

/**
 * Search for positions within a specific company
 */
export const getAutocompletePosition = <ThrowOnError extends boolean = false>(
  options: Options<GetAutocompletePositionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAutocompletePositionResponses,
    GetAutocompletePositionErrors,
    ThrowOnError
  >({
    url: '/autocomplete/position',
    ...options,
  })
}

/**
 * Search for locations with fuzzy matching across city, state, and state code
 */
export const getAutocompleteLocation = <ThrowOnError extends boolean = false>(
  options: Options<GetAutocompleteLocationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAutocompleteLocationResponses,
    GetAutocompleteLocationErrors,
    ThrowOnError
  >({
    url: '/autocomplete/location',
    ...options,
  })
}

/**
 * Retrieve companies and positions owned by the authenticated user
 */
export const getCompanyPosition = <ThrowOnError extends boolean = false>(
  options?: Options<GetCompanyPositionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCompanyPositionResponses,
    GetCompanyPositionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/company-position',
    ...options,
  })
}

/**
 * Create a new company and position pair
 */
export const postCompanyPosition = <ThrowOnError extends boolean = false>(
  options: Options<PostCompanyPositionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCompanyPositionResponses,
    PostCompanyPositionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/company-position',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Retrieve co-op submission records with pagination and filtering
 */
export const getSubmissions = <ThrowOnError extends boolean = false>(
  options?: Options<GetSubmissionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: '/submissions',
      ...options,
    },
  )
}

/**
 * Update an existing co-op submission
 */
export const patchSubmissions = <ThrowOnError extends boolean = false>(
  options?: Options<PatchSubmissionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: '/submissions',
    ...options,
  })
}

/**
 * Create new co-op submission(s)
 */
export const postSubmissions = <ThrowOnError extends boolean = false>(
  options?: Options<PostSubmissionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: '/submissions',
    ...options,
  })
}

/**
 * Retrieve all co-op submissions owned by the authenticated user
 */
export const getSubmissionsMe = <ThrowOnError extends boolean = false>(
  options?: Options<GetSubmissionsMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: '/submissions/me',
      ...options,
    },
  )
}
