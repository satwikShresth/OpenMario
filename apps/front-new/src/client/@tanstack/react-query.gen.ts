// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getV1AuthSearchToken, postV1AuthLogin, getV1AuthLoginByToken, getV1CompanyPosition, postV1CompanyPosition, getV1Submissions, patchV1Submissions, postV1Submissions, getV1SubmissionsMe, getV1AutocompleteCompany, getV1AutocompletePosition, getV1AutocompleteLocation } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { GetV1AuthSearchTokenData, PostV1AuthLoginData, PostV1AuthLoginError, PostV1AuthLoginResponse, GetV1AuthLoginByTokenData, GetV1CompanyPositionData, PostV1CompanyPositionData, PostV1CompanyPositionError, PostV1CompanyPositionResponse, GetV1SubmissionsData, PatchV1SubmissionsData, PatchV1SubmissionsError, PatchV1SubmissionsResponse, PostV1SubmissionsData, PostV1SubmissionsError, PostV1SubmissionsResponse, GetV1SubmissionsMeData, GetV1AutocompleteCompanyData, GetV1AutocompletePositionData, GetV1AutocompleteLocationData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getV1AuthSearchTokenQueryKey = (options?: Options<GetV1AuthSearchTokenData>) => createQueryKey('getV1AuthSearchToken', options);

/**
 * Get a tenant token for searching, filtering, and sorting (expires in 1 day)
 */
export const getV1AuthSearchTokenOptions = (options?: Options<GetV1AuthSearchTokenData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1AuthSearchToken({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1AuthSearchTokenQueryKey(options)
    });
};

export const postV1AuthLoginQueryKey = (options?: Options<PostV1AuthLoginData>) => createQueryKey('postV1AuthLogin', options);

/**
 * Request a magic link for authentication
 */
export const postV1AuthLoginOptions = (options?: Options<PostV1AuthLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postV1AuthLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postV1AuthLoginQueryKey(options)
    });
};

/**
 * Request a magic link for authentication
 */
export const postV1AuthLoginMutation = (options?: Partial<Options<PostV1AuthLoginData>>): UseMutationOptions<PostV1AuthLoginResponse, PostV1AuthLoginError, Options<PostV1AuthLoginData>> => {
    const mutationOptions: UseMutationOptions<PostV1AuthLoginResponse, PostV1AuthLoginError, Options<PostV1AuthLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postV1AuthLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV1AuthLoginByTokenQueryKey = (options: Options<GetV1AuthLoginByTokenData>) => createQueryKey('getV1AuthLoginByToken', options);

/**
 * Verify magic link token and authenticate user
 */
export const getV1AuthLoginByTokenOptions = (options: Options<GetV1AuthLoginByTokenData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1AuthLoginByToken({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1AuthLoginByTokenQueryKey(options)
    });
};

export const getV1CompanyPositionQueryKey = (options?: Options<GetV1CompanyPositionData>) => createQueryKey('getV1CompanyPosition', options);

/**
 * Retrieve companies and positions owned by the authenticated user
 */
export const getV1CompanyPositionOptions = (options?: Options<GetV1CompanyPositionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1CompanyPosition({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1CompanyPositionQueryKey(options)
    });
};

export const postV1CompanyPositionQueryKey = (options?: Options<PostV1CompanyPositionData>) => createQueryKey('postV1CompanyPosition', options);

/**
 * Create a new company and position pair
 */
export const postV1CompanyPositionOptions = (options?: Options<PostV1CompanyPositionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postV1CompanyPosition({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postV1CompanyPositionQueryKey(options)
    });
};

/**
 * Create a new company and position pair
 */
export const postV1CompanyPositionMutation = (options?: Partial<Options<PostV1CompanyPositionData>>): UseMutationOptions<PostV1CompanyPositionResponse, PostV1CompanyPositionError, Options<PostV1CompanyPositionData>> => {
    const mutationOptions: UseMutationOptions<PostV1CompanyPositionResponse, PostV1CompanyPositionError, Options<PostV1CompanyPositionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postV1CompanyPosition({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV1SubmissionsQueryKey = (options: Options<GetV1SubmissionsData>) => createQueryKey('getV1Submissions', options);

/**
 * Retrieve co-op submission records with pagination and filtering
 */
export const getV1SubmissionsOptions = (options: Options<GetV1SubmissionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1Submissions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1SubmissionsQueryKey(options)
    });
};

/**
 * Update an existing co-op submission
 */
export const patchV1SubmissionsMutation = (options?: Partial<Options<PatchV1SubmissionsData>>): UseMutationOptions<PatchV1SubmissionsResponse, PatchV1SubmissionsError, Options<PatchV1SubmissionsData>> => {
    const mutationOptions: UseMutationOptions<PatchV1SubmissionsResponse, PatchV1SubmissionsError, Options<PatchV1SubmissionsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchV1Submissions({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postV1SubmissionsQueryKey = (options?: Options<PostV1SubmissionsData>) => createQueryKey('postV1Submissions', options);

/**
 * Create new co-op submission(s)
 */
export const postV1SubmissionsOptions = (options?: Options<PostV1SubmissionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postV1Submissions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postV1SubmissionsQueryKey(options)
    });
};

/**
 * Create new co-op submission(s)
 */
export const postV1SubmissionsMutation = (options?: Partial<Options<PostV1SubmissionsData>>): UseMutationOptions<PostV1SubmissionsResponse, PostV1SubmissionsError, Options<PostV1SubmissionsData>> => {
    const mutationOptions: UseMutationOptions<PostV1SubmissionsResponse, PostV1SubmissionsError, Options<PostV1SubmissionsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postV1Submissions({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV1SubmissionsMeQueryKey = (options?: Options<GetV1SubmissionsMeData>) => createQueryKey('getV1SubmissionsMe', options);

/**
 * Retrieve all co-op submissions owned by the authenticated user
 */
export const getV1SubmissionsMeOptions = (options?: Options<GetV1SubmissionsMeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1SubmissionsMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1SubmissionsMeQueryKey(options)
    });
};

export const getV1AutocompleteCompanyQueryKey = (options: Options<GetV1AutocompleteCompanyData>) => createQueryKey('getV1AutocompleteCompany', options);

/**
 * Search for companies by name with fuzzy matching
 */
export const getV1AutocompleteCompanyOptions = (options: Options<GetV1AutocompleteCompanyData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1AutocompleteCompany({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1AutocompleteCompanyQueryKey(options)
    });
};

export const getV1AutocompletePositionQueryKey = (options: Options<GetV1AutocompletePositionData>) => createQueryKey('getV1AutocompletePosition', options);

/**
 * Search for positions within a specific company
 */
export const getV1AutocompletePositionOptions = (options: Options<GetV1AutocompletePositionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1AutocompletePosition({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1AutocompletePositionQueryKey(options)
    });
};

export const getV1AutocompleteLocationQueryKey = (options: Options<GetV1AutocompleteLocationData>) => createQueryKey('getV1AutocompleteLocation', options);

/**
 * Search for locations with fuzzy matching across city, state, and state code
 */
export const getV1AutocompleteLocationOptions = (options: Options<GetV1AutocompleteLocationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV1AutocompleteLocation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV1AutocompleteLocationQueryKey(options)
    });
};