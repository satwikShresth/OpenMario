// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { GetAutocompleteCompanyData, GetAutocompleteCompanyResponse, GetAutocompleteCompanyError, GetAutocompletePositionData, GetAutocompletePositionResponse, GetAutocompletePositionError, GetAutocompleteLocationData, GetAutocompleteLocationResponse, GetAutocompleteLocationError, GetSubmissionsData, GetSubmissionsResponse, GetSubmissionsError, PostSubmissionsData, PostSubmissionsResponse, PostSubmissionsError } from './types.gen';

export const client = createClient(createConfig({
    baseURL: "/api/v1",
}));

export class SearchService {
    /**
     * Search for companies by name with fuzzy matching
     */
    public static getAutocompleteCompany<ThrowOnError extends boolean = false>(options: Options<GetAutocompleteCompanyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAutocompleteCompanyResponse, GetAutocompleteCompanyError, ThrowOnError>({
            url: '/autocomplete/company',
            ...options
        });
    }

    /**
     * Search for positions within a specific company
     */
    public static getAutocompletePosition<ThrowOnError extends boolean = false>(options: Options<GetAutocompletePositionData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAutocompletePositionResponse, GetAutocompletePositionError, ThrowOnError>({
            url: '/autocomplete/position',
            ...options
        });
    }

    /**
     * Search for locations with fuzzy matching across city, state, and state code
     */
    public static getAutocompleteLocation<ThrowOnError extends boolean = false>(options: Options<GetAutocompleteLocationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAutocompleteLocationResponse, GetAutocompleteLocationError, ThrowOnError>({
            url: '/autocomplete/location',
            ...options
        });
    }

}

export class SubmissionsService {
    /**
     * Retrieve co-op submission records with pagination and filtering
     */
    public static getSubmissions<ThrowOnError extends boolean = false>(options?: Options<GetSubmissionsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetSubmissionsResponse, GetSubmissionsError, ThrowOnError>({
            url: '/submissions',
            ...options
        });
    }

    /**
     * Create new co-op submission(s)
     */
    public static postSubmissions<ThrowOnError extends boolean = false>(options: Options<PostSubmissionsData, ThrowOnError>) {
        return (options?.client ?? client).post<PostSubmissionsResponse, PostSubmissionsError, ThrowOnError>({
            url: '/submissions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }

}
